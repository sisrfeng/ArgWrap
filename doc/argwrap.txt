argwrap.txt

Wrap and unwrap function arguments, lists, and dictionaries in Vim

========================================================================================================================
CONTENTS  *argwrap-contents*

1. ArgWrap.........................................|argwrap-argwrap|
    1.1. Installation.........................|argwrap-installation|
    1.2. Configuration.......................|argwrap-configuration|
    1.3. Hooks.......................................|argwrap-hooks|
    1.4. Usage.......................................|argwrap-usage|
    1.5. License...................................|argwrap-license|

========================================================================================================================
ARGWRAP                                                                                                  *argwrap-argwrap*

An industrial strength argument wrapping



------------------------------------------------------------------------------------------------------------------------
INSTALLATION                                                                                        *argwrap-installation*

    For example, to declare a normal mode mapping, add the following command:

        nmap <silent> <leader>a <Plug>(ArgWrapToggle)


------------------------------------------------------------------------------------------------------------------------
CONFIGURATION                                                                                      *argwrap-configuration*

You can customize the behavior of this extension by
setting values for any of the following optional buffer and
global configuration variables in your `.vimrc` file.
Buffer variables (prefixed with `b:`)
take precedence over global variables (prefixed with `g:`),
    making them ideal for configuring the behavior of this extension on a file by
    file basis using `ftplugin` or `autocmd`.
For example,

    the `多argwrap_tail_comma多` variable has
    two variants declared as `b:argwrap_tail_comma` and `g:argwrap_tail_comma`,
    for buffer and  global scopes respectively.

*argwrap_line_prefix*
    Specifies a line prefix to be added and
    removed when working with languages that require newlines to be escaped.
    Line prefix disabled (default)

        Foo(
            wibble,
            wobble,
            wubble
        )

    Line prefix enabled for Vimscript ()

        Foo(
            \wibble,
            \wobble,
            \wubble
        \)

*argwrap_padded_braces*
    Brace padding disabled (default)

        [1, 2, 3]
        {1, 2, 3}

    Brace padding enabled for square brackets only

        [ 1, 2, 3 ]
        {1, 2, 3}

    Padding can be specified for multiple brace types

*argwrap_tail_comma*
    Specifies if any closing brace should be preceded with a comma when wrapping lines.
    Tail comma disabled (default)

        Foo(
            wibble,
            wobble,
            wubble
        )

    Tail comma enabled ()

        Foo(
            wibble,
            wobble,
            wubble,
        )

*argwrap_tail_comma_braces*
    Specifies which closing brace should be preceded with a comma when wrapping lines.
    Tail comma disabled (default)

        Foo(
            wibble,
            wobble,
            wubble
        )

    Tail comma enabled for square brackets only

        [
            1,
            2,
            3,
        ]

*argwrap_tail_indent_braces*
    Specifies if the closing brace should be indented to argument depth.
    Tail indent disabled

        Foo(
            wibble,
            wobble,
            wubble
        )

    Tail indent enabled for parenthesis

        Foo(
            wibble,
            wobble,
            wubble
            )

*argwrap_wrap_closing_brace*
    Brace wrapping enabled (default)

        Foo(
            wibble,
            wobble,
            wubble
        )

    Brace wrapping disabled

        Foo(
            wibble,
            wobble,
            wubble)

*argwrap_comma_first*
    Comma first disabled (default)

        Foo(
            wibble,
            wobble,
            wubble
        )

    Comma first enabled ()

        Foo(
            wibble
            , wobble
            , wubble
        )

*argwrap_comma_first_indent*
    when used in conjunction with `argwrap_comma_first`.
    Comma first indent disabled (default)

        Foo(
            wibble
            , wobble
            , wubble
        )

    Comma first indent enabled ()

        Foo(
              wibble
            , wobble
            , wubble
        )

*argwrap_php_smart_brace*
    Specifies if the opening brace of 多PHP methods多 should be wrap/unwrap as well.
    PHP smart brace disabled (default)

        public function foo(
            int $x,
            int $y
        )
        {

    PHP smart brace enabled

        public function foo(
            int $x,
            int $y
        ) {


------------------------------------------------------------------------------------------------------------------------
HOOKS                                                                                                      *argwrap-hooks*

    It is possible to hook before or after a  wrap/unwrap operation using
    autoloaded functions, the hooks are named:
        - `pre_wrap`
        - `pre_unwrap`
        - `post_wrap`
        - `post_unwrap`

    For example to do something after any wrap
    create a function:
            argwrap#hooks#my_hook#post_wrap(range, container, arguments)

    It is also possible to create a hook for a specific filetype:
            argwrap#hooks#filetype#vim#my_hook#post_wrap(range, container, arguments)


    Global hooks are loaded on the first time a wrap/unwrap operation is done.
    Filetype hooks however are only loaded for the current filetype.
    You can see the list of loaded hooks with:

                :echo g:argwrap_global_hooks
                :echo g:argwrap_filetype_hooks
                :echo b:argwrap_hooks


    The hooks are loaded from any directory specified in the |runtimepath|.
    Global hooks will be executed before filetype ones.
    Global and  filetype hooks are sorted by
        the |globpath()| function.
        meaning you can control the execution order of the hooks by
        prefixing them with a priority.
    Post hooks order is reversed in order to
    keep the execution order logical.


    For example
        if there two hooks named `000_cursor` and `200_anything` ,
    the cursor hook being responsible to preserve the cursor position it must be executed first to ensure no modification of the cursor position has been done yet so it receive the lowest priority.
    The execution stack for a wrap operation would then be:

        - `000_cursor#pre_wrap`
        - `000_anything#pre_wrap`
        - `wrap operation`
        - `000_anything#post_wrap`
        - `000_cursor#post_wrap`


    An important things to know when writing a new hook is that calling an |autoload| function which
    does not exist will source the file that should contain the function every time.
    So even if you do not need one of the hook,
    always define them all.
    This is a template you can use to get started:

        function! argwrap#hooks#my_hook#pre_wrap(range, container, arguments) abort " {{{
            " Do nothing but prevent the file to be loaded more than once
            " When calling an autoload function
                that is not define the script that
                should contain it
                is sourced every time the function is called
        endfunction  " }}}

        function! argwrap#hooks#my_hook#pre_unwrap(range, container, arguments) abort " {{{
            " Do nothing but prevent the file to be loaded more than once
            " When calling an autoload function that is not define the script that
             " should contain it is sourced every time the function is called
        endfunction  " }}}

        function! argwrap#hooks#my_hook#post_wrap(range, container, arguments) abort " {{{
        " Do nothing but prevent the file to be loaded more than once
        " When calling an autoload function that is not define the script that
        " should contain it is sourced every time the function is called
        endfunction  " }}}

        function! argwrap#hooks#my_hook#post_unwrap(range, container, arguments) abort " {{{
        " Do nothing but prevent the file to be loaded more than once
        " When calling an autoload function that is not define the script that
        " should contain it is sourced every time the function is called
        endfunction  " }}}

------------------------------------------------------------------------------------------------------------------------
USAGE                                                                                                      *argwrap-usage*

1.  Position the cursor inside of the scope of the parenthesis,
    brackets or curly braces you wish to wrap/unwrap (not  on top, before or after them).

2.  Execute the keyboard binding you defined above to toggle the wrapping and unwrapping of arguments.

------------------------------------------------------------------------------------------------------------------------


DIY_again
DIY_2  vim:filetype=help:syntax=help:
