wrapA.txt

Wrap and unwrap function args, lists, and dictionaries in Vim

========================================================================================================================
CONTENTS  *wrapA-contents*

1. wrapA.........................................|wrapA-wrapA|
    1.1. Installation.........................|wrapA-installation|
    1.2. Configuration.......................|wrapA-configuration|
    1.3. Hooks.......................................|wrapA-hooks|
    1.4. Usage.......................................|wrapA-usage|
    1.5. License...................................|wrapA-license|

========================================================================================================================
wrapA                                                                                                  *wrapA-wrapA*

An industrial strength arg wrapping



------------------------------------------------------------------------------------------------------------------------
INSTALLATION                                                                                        *wrapA-installation*

    For example, to declare a normal mode mapping, add the following command:

        nmap <silent> <leader>a <Plug>(wrapA_Toggle)


------------------------------------------------------------------------------------------------------------------------
CONFIGURATION                                                                                      *wrapA-configuration*

You can customize the behavior of this extension by
setting values for any of the following optional buffer and
global configuration variables in your `.vimrc` file.
Buffer variables (prefixed with `b:`)
take precedence over global variables (prefixed with `g:`),
    making them ideal for configuring the behavior of this extension on a file by
    file basis using `ftplugin` or `autocmd`.
For example,

    the `¿wrapA_tail_comma¿` variable has
    two variants declared as `b:wrapA_tail_comma` and `g:wrapA_tail_comma`,
    for buffer and  global scopes respectively.

*wrapA_line_prefix*
    Specifies a line prefix to be added and
    removed when working with languages that require newlines to be escaped.
    Line prefix disabled (default)

        Foo(
            wibble,
            wobble,
            wubble
        )

    Line prefix enabled for Vimscript ()

        Foo(
            \wibble,
            \wobble,
            \wubble
        \)

*wrapA_padded_braces*
    Brace padding disabled (default)

        [1, 2, 3]
        {1, 2, 3}

    Brace padding enabled for square brackets only

        [ 1, 2, 3 ]
        {1, 2, 3}

    Padding can be specified for multiple brace types

*wrapA_tail_comma*
    Specifies if any closing brace should be preceded with a comma when wrapping lines.
    Tail comma disabled (default)

        Foo(
            wibble,
            wobble,
            wubble
        )

    Tail comma enabled ()

        Foo(
            wibble,
            wobble,
            wubble,
        )

*wrapA_tail_comma_braces*
    Specifies which closing brace should be preceded with a comma when wrapping lines.
    Tail comma disabled (default)

        Foo(
            wibble,
            wobble,
            wubble
        )

    Tail comma enabled for square brackets only

        [
            1,
            2,
            3,
        ]

*wrapA_tail_indent_braces*
    Specifies if the closing brace should be indented to arg depth.
    Tail indent disabled

        Foo(
            wibble,
            wobble,
            wubble
        )

    Tail indent enabled for parenthesis

        Foo(
            wibble,
            wobble,
            wubble
            )

*wrapA_wrap_closing_brace*
    Brace wrapping enabled (default)

        Foo(
            wibble,
            wobble,
            wubble
        )

    Brace wrapping disabled

        Foo(
            wibble,
            wobble,
            wubble)

*wrapA_comma_first*
    Comma first disabled (default)

        Foo(
            wibble,
            wobble,
            wubble
        )

    Comma first enabled ()

        Foo(
            wibble
            , wobble
            , wubble
        )

*wrapA_comma_first_indent*
    when used in conjunction with `wrapA_comma_first`.
    Comma first indent disabled (default)

        Foo(
            wibble
            , wobble
            , wubble
        )

    Comma first indent enabled ()

        Foo(
              wibble
            , wobble
            , wubble
        )

*wrapA_php_smart_brace*
    Specifies if the opening brace of ¿PHP methods¿ should be wrap/unwrap as well.
    PHP smart brace disabled (default)

        public function foo(
            int $x,
            int $y
        )
        {

    PHP smart brace enabled

        public function foo(
            int $x,
            int $y
        ) {


------------------------------------------------------------------------------------------------------------------------
HOOKS                                                                                                      *wrapA-hooks*

    It is possible to hook before or after a  wrap/unwrap operation using
    autoloaded functions, the hooks are named:
        - `pre_wrap`
        - `pre_unwrap`
        - `post_wrap`
        - `post_unwrap`

    For example to do something after any wrap
    create a function:
            wrapA#hooks#my_hook#post_wrap(range, container, args)

    It is also possible to create a hook for a specific filetype:
            wrapA#hooks#filetype#vim#my_hook#post_wrap(range, container, args)


    Global hooks are loaded on the first time a wrap/unwrap operation is done.
    Filetype hooks however are only loaded for the current filetype.
    You can see the list of loaded hooks with:

                :echo g:wrapA_global_hooks
                :echo g:wrapA_filetype_hooks
                :echo b:wrapA_hooks


    The hooks are loaded from any directory specified in the |runtimepath|.

    Ordering~
        Global hooks will be executed before
        filetype ones.

        Global and  filetype hooks are sorted by
            the |globpath()| function.
            meaning you can control the execution order of the hooks by
            prefixing them with a priority.

        Post hooks order is reversed in order to
        keep the execution order logical.


        For example
            if there two hooks named `000_cursor` and `200_anything` ,
            the cursor hook being responsible to preserve the cursor position
                it must be executed first
                to ensure no modification of the cursor position has been done yet
                so it receive the lowest priority.
            The execution stack for a wrap operation would then be:

                - `000_cursor#pre_wrap`
                - `000_anything#pre_wrap`
                - `wrap operation`
                - `000_anything#post_wrap`
                - `000_cursor#post_wrap`



    An important things to know when writing a new hook
    is that
    calling an |autoload| function which  does not exist
        will source the file that
        `should` contain the function ¿every time¿.
    So even if you
        do not need some of the hooks,
        always define them all.
        This is a template you can use to get started:


        fun! wrapA#hooks#my_hook#pre_wrap(range, container, args) abort " {{{
            " echo 'hi'
        endf  " }}}

        fun! wrapA#hooks#my_hook#pre_unwrap(range, container, args) abort " {{{
            " echo 'hi'
        endf  " }}}

        fun! wrapA#hooks#my_hook#post_wrap(range, container, args) abort " {{{
            " echo 'hi'
        endf  " }}}

        fun! wrapA#hooks#my_hook#post_unwrap(range, container, args) abort " {{{
            " echo 'hi'
        endf  " }}}

------------------------------------------------------------------------------------------------------------------------
USAGE                                                                                                      *wrapA-usage*

1.  Position the cursor inside of the scope of the parenthesis,
    brackets or curly braces you wish to wrap/unwrap (not  on top, before or after them).

2.  Execute the keyboard binding you defined above to toggle the wrapping and unwrapping of args.

------------------------------------------------------------------------------------------------------------------------


DIY_again
DIY_2  vim:filetype=help:syntax=help:
